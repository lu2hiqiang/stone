<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.stone.dao.GoodsTypeMapper">
	<resultMap id="BaseResultMap" type="com.stone.bean.GoodsType">
		<id column="type_id" jdbcType="INTEGER" property="typeId" />
		<result column="type_name" jdbcType="VARCHAR" property="typeName" />
	</resultMap>
	<resultMap id="BaseResultMapPlus" type="com.stone.bean.GoodsType">
		<id column="type_id" jdbcType="INTEGER" property="typeId" />
		<result column="type_name" jdbcType="VARCHAR" property="typeName" />
		<collection property="goodsList" column="type_id" ofType="com.stone.bean.Goods">
			<id column="goods_name" jdbcType="VARCHAR" property="goodsName" />
		</collection>
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		type_id, type_name
	</sql>
	<select id="selectByExample" parameterType="com.stone.bean.GoodsTypeExample"
		resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from h_goods_type
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from h_goods_type
		where type_id = #{typeId,jdbcType=INTEGER}
	</select>
	<select id="selectAllPuls" resultMap="BaseResultMapPlus">
		select hgt.type_id,hgt.type_name,hg.goods_name from h_goods_type hgt left join h_goods hg on hg.goods_type_id like CONCAT('%',hgt.type_id,'%');
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from h_goods_type
		where type_id = #{typeId,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.stone.bean.GoodsTypeExample">
		delete from h_goods_type
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.stone.bean.GoodsType">
		insert into h_goods_type (type_id, type_name)
		values (#{typeId,jdbcType=INTEGER}, #{typeName,jdbcType=VARCHAR})
	</insert>
	<insert id="insertSelective" parameterType="com.stone.bean.GoodsType">
		insert into h_goods_type
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="typeId != null">
				type_id,
			</if>
			<if test="typeName != null">
				type_name,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="typeId != null">
				#{typeId,jdbcType=INTEGER},
			</if>
			<if test="typeName != null">
				#{typeName,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.stone.bean.GoodsTypeExample"
		resultType="java.lang.Long">
		select count(*) from h_goods_type
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update h_goods_type
		<set>
			<if test="record.typeId != null">
				type_id = #{record.typeId,jdbcType=INTEGER},
			</if>
			<if test="record.typeName != null">
				type_name = #{record.typeName,jdbcType=VARCHAR},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update h_goods_type
		set type_id = #{record.typeId,jdbcType=INTEGER},
		type_name = #{record.typeName,jdbcType=VARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.stone.bean.GoodsType">
		update h_goods_type
		<set>
			<if test="typeName != null">
				type_name = #{typeName,jdbcType=VARCHAR},
			</if>
		</set>
		where type_id = #{typeId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.stone.bean.GoodsType">
		update h_goods_type
		set type_name = #{typeName,jdbcType=VARCHAR}
		where type_id = #{typeId,jdbcType=INTEGER}
	</update>
</mapper>